{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS EC2 Instance with automated Wazuh Deployment.",

  "Parameters" : {
    "KeyName": {
      "Description" : "Enter the KeyPair Name here",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "MyKey",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
   }
  },

  "Resources" : {
    "EC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "Tags" : [
            {"Key" : "Name", "Value" : "Ubuntu18Wazuh"}],
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" },
                            { "Ref" : "KibanaUISecurityGroup" }],
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : "ami-0a313d6098716f372",
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                        "#!/bin/bash -v\n",
                        "sudo apt-get update\n",
                        "sudo apt-get install --assume-yes curl apt-transport-https lsb-release\n",
                        "if [ ! -f /usr/bin/python ]; then sudo ln -s /usr/bin/python3 /usr/bin/python; fi\n",
                        "sudo curl -s https://packages.wazuh.com/key/GPG-KEY-WAZUH | apt-key add -\n",
                        "sudo echo \"deb https://packages.wazuh.com/3.x/apt/ stable main\" | tee -a /etc/apt/sources.list.d/wazuh.list \n",
                        "sudo apt-get update\n",
                        "sudo apt-get install wazuh-manager\n",
                        "sudo curl -sL https://deb.nodesource.com/setup_8.x | bash -\n",
                        "sudo apt-get install --assume-yes nodejs\n",
                        "sudo apt-get install --assume-yes wazuh-api\n",
                        "sudo apt-get update\n",
                        "sudo apt-get install --assume-yes openjdk-8-jre\n",
                        "sudo apt-get install --assume-yes curl apt-transport-https\n",
                        "sudo curl -s https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -\n",
                        "echo \"deb https://artifacts.elastic.co/packages/6.x/apt stable main\" | sudo tee /etc/apt/sources.list.d/elastic-6.x.list\n",
                        "sudo apt-get update\n",
                        "sudo apt-get install --assume-yes elasticsearch=6.7.1\n",
                        "sudo systemctl daemon-reload\n",
                        "sudo systemctl enable elasticsearch.service\n",
                        "sudo systemctl start elasticsearch.service\n",
                        "sudo curl https://raw.githubusercontent.com/wazuh/wazuh/3.9/extensions/elasticsearch/wazuh-elastic6-template-alerts.json | sudo curl -X PUT \"http://localhost:9200/_template/wazuh\" -H 'Content-Type: application/json' -d @-\n",
                        "sudo apt-get install --assume-yes logstash=1:6.7.1-1\n",
                        "sudo curl -so /etc/logstash/conf.d/01-wazuh.conf https://raw.githubusercontent.com/wazuh/wazuh/3.9/extensions/logstash/01-wazuh-local.conf\n",
                        "sudo usermod -a -G ossec logstash\n",
                        "sudo systemctl daemon-reload\n",
                        "sudo systemctl enable logstash.service\n",
                        "sudo systemctl start logstash.service\n",
                        "sudo apt-get install --assume-yes kibana=6.7.1\n",
                        "echo 'server.host: \"0.0.0.0\"' | sudo tee -a /etc/kibana/kibana.yml\n",
                        "echo 'server.port: \"5601\"' | sudo tee -a /etc/kibana/kibana.yml\n",
                        "sudo chown -R kibana:root /usr/share/kibana/optimize/bundles/\n",
                        "sudo systemctl restart kibana\n",
                        "sudo -u kibana NODE_OPTIONS=\"--max-old-space-size=3072\" /usr/share/kibana/bin/kibana-plugin install https://packages.wazuh.com/wazuhapp/wazuhapp-3.9.0_6.7.1.zip\n",
                        "sudo systemctl daemon-reload\n"
                        "sudo systemctl enable kibana.service\n",
                        "sudo systemctl start kibana.service\n",
                        "sudo sed -i \"s/^deb/#deb/\" /etc/apt/sources.list.d/elastic-6.x.list\n",
                        "sudo apt-get update\n",
                        "sudo iptables -I INPUT -p tcp --dport 5601 --syn -j ACCEPT\n",
                        "sudo iptables -I INPUT -p tcp --dport 9200 --syn -j ACCEPT\n"
                        ]]}}

      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        } ]
      }
    },

    "KibanaUISecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Kibana UI access via port 5601",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "5601",
          "ToPort" : "5601",
          "CidrIp" : { "Ref" : "SSHLocation"}
        } ]
      }
    }
  },

  "Outputs" : {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 instance",
      "Value" : { "Ref" : "EC2Instance" }
    },
    "AZ" : {
      "Description" : "Availability Zone of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "AvailabilityZone" ] }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicDnsName" ] }
    },
    "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] }
    }
}
}
